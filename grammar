program -> PROGRAM IDENTIFIER SEMICOLON var_block function_list block DOT

var_block -> VAR var_list SEMICOLON | 
var_list -> var_declaration | var_declaration SEMICOLON var_list
var_declaration -> identifier_list COLON type   
identifier_list -> IDENTIFIER | IDENTIFIER COMMA identifier_list

function_list -> function_declaration  function_list |    
function_declaration -> function_heading SEMICOLON var_block block SEMICOLON
function_heading -> FUNCTION IDENTIFIER parameter_list COLON type
parameter_list -> LPAREN parameter_block RPAREN |
parameter_block -> parameter | parameter SEMICOLON parameter_block
parameter -> identifier_list COLON type

block -> BEGIN statement_list END 
statement_list -> statement SEMICOLON statement_list |
statement -> if_statement | for_statement | while_statement | assignment_statement | block | BREAK | CONTINUE 
            |READ LPAREN identifier_list RPAREN
            |WRITE LPAREN expression_list RPAREN
            |IDENTIFIER LPAREN expression_list RPAREN

if_statement -> IF expression THEN statement else_part
else_part -> ELSE statement |

while_statement -> WHILE expression DO statement

for_statement -> FOR assignment_statement direction expression DO statement
direction -> TO | DOWNTO

assignment_statement -> identifier_or_elem COLON_EQUAL expression
identifier_or_elem -> IDENTIFIER | IDENTIFIER LBRACKET expression RBRACKET

expression -> applicative_expr | applicative_expr COMPARATOR applicative_expr
applicative_expr -> sign_opt multiplicative_expr | sign_opt multiplicative_expr sign_or multiplicative_expr
sign_opt -> SIGN | 
sign_or -> SIGN | OR

multiplicative_expr -> term | term op multiplicative_expr
op -> STAR | DIVIDER | DIV | MOD | AND

term -> NUMBER 
      | STRING_EXPRESSION
      | CHAR_EXPRESSION
      | identifier_or_elem
      | IDENTIFIER LPAREN expression_list RPAREN
      | LPAREN expression RPAREN
      | NOT term
      

expression_list -> expression | expression COMMA expression_list

type -> INTEGER | STRING | CHAR


SEMICOLON -> ;
COMMA -> ,
DOT -> .
COLON -> :
COLON_EQUAL -> :=
COMPARATOR ->  >= | <= | = | <> | > | <
LPAREN -> (
RPAREN -> )
SIGN -> + | -
STAR -> *
DIVIDER -> /
IDENTIFIER -> [a-zA-Z][a-zA-Z0-9]*
NUMBER -> [0-9]+ 
STRING_EXPRESSION -> ".*?"
CHAR_EXPRESSION -> '.'
LBRACKET -> [
RBRACKET -> ]